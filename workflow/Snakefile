# configfile: config.yaml

# SAMPLES = []

rule all:
    input:

checkpoint extract:
    input:
        "upload.tar.gz"
    output:
        directory("upload")
    shell:'''
    rm -r upload
    mkdir upload
    tar -xzvf upload.tar.gz -C upload
    '''

def aggregate_input(wildcards):
    checkpoint_output = checkpoints.extract.get(**wildcards).output[0]
    return expand("upload/{seq}.fna", 
        i=glob_wildcards(os.path.join(checkpoint_output, {seq}.fna)).seq)

rule list_inputs:
    input:
        aggregate_input
    output:
        "results/input_list.txt"
    shell:'''
        rm -r results
        mkdir results
        {input} > {output}
        '''

rule cctyper:
    input: 
        "upload/{seq}.fna"
    output:
        "results/cctyper/{seq}"
    threads: 8
    conda:
        "envs/cctyper.yaml"
    shell:'''
        mkdir {output}
        cctyper --threads {threads} {input} {output}
        '''

rule ccfinder:
    input:
        "upload/{seq}.fna"
    output:
        "results/ccfinder/{seq}"
    threads: 1
    shell:'''
        perl bin/ccfinder/CRISPRCasFinder.pl --in {input} --out {output}}
        '''

rule cidentify:
    input:
        "upload/{seq}.fna"
    output:
        "results/ci/"
    threads: 1
    conda:

    shell:'''
        python bin/cidentify/CRISPRidentify.py --file {input} --result_folder {output}}
        '''

rule cdetect:
    input:
        "upload/{seq}.fna"
    output:
        "results/cdetect/{seq}.1_crispr",
        "results/cdetect/{seq}.1_crispr.gff",
        "results/cdetect/{seq}.1_crispr.fp",
    threads: 1
    conda:
        "padloc"
    shell:'''
        run-crisprdetect --input {input} --output {output[0]}
        '''

rule padloc:
    input:
        "upload/{seq}.fna",
        "results/cdetect/{seq}.!_crispr.gff",
    output:
        "results/padloc/{seq}"
    threads: 8
    conda:
        "padloc"
    shell:'''
        padloc --fna {input[0]} --crispr {input[1]} --outdir {ouput} --cpu {threads}
        '''
        
rule collateccf:
    input:
        "results/ccfinder/{seq}"
    output:
        "results/ccfinder.tsv"
    threads
