#tell us how you did#
onsuccess:
    print("Workflow finished, no error")

onerror:
    print("An error occurred")

#pulls names from seqs in upload folder, assigns list as a variable#
SEQS = glob_wildcards("upload/{seq}.fasta").seq

#rules run by default#
rule all:
    input: 
        "results.tar.gz"

# edit all '/' characters in sequence names to '_' to prevent cidentify errors
# edit all '@' characters in sequence names to '_' to prevent cctyper errors
# rename upload directory to clean
rule check_inputs:
    input:
        seq = expand("upload/{seq}.fasta", seq=SEQS),
    output:
        expand("clean/{seq}.fasta", seq=SEQS)
    log:
        out="logs/prancc.log",
        err="logs/prancc.error.log",
    shell:'''
        mkdir -pv clean >> {log.out} 2>> {log.err}
        cp -v {input.seq} clean >> {log.out} 2>> {log.err}
        sed -i 's/[/.@]/_/g' {output} >> {log.out} 2>> {log.err}
        if [ grep -q '/' {input.seq} -eq 0 ]
        then
            grep -Hn '/' {input.seq} >> {log.out} 2>> {log.err}
            grep -l '/' {input.seq} >> {output} 2>> {log.err}
        fi
        '''
        # want workflow to work like this: grep to find all problem children sequences
        # move all of them to a seperate directory clean
        # move all non-problem children to clean - so left with upload with only problems
        # run following rules with clean
        # at end of workflow, move everything but the newly cleaned sequences back to upload
        # also do this on failure.
       
# run cctyper and output results to directory in results/cctyper named after .fasta
rule cctyper:
    input:
        "clean/{seq}.fasta"
    output:
        directory("results/cctyper/{seq}")
    benchmark:
        "results/benchmark/cct_{seq}.txt"
    log:
        out="logs/cctyper_{seq}.log",
        err="logs/cctyper_{seq}.error.log",
    threads: 1
    conda:
        "envs/cctyper.yaml"
    shell:'''
        mkdir -p results/cctyper
        cctyper --threads {threads} \
            {input} {output} >> {log.out} 2>> {log.err}
        '''

# run ccfinder, output results to directory in results/ccfinder named after .fasta input
# to avoid bug in ccfinder, I specify a directory in cwd, then later move it
# seriously if you're reading this and scoffing, just do it. don't try to do it in /tmp/ 
# or send it directly to resultshttps://github.com/delbeauxlab/PRANCc.git. that really is the bug. any path that isn't a folder
# that doesn't exist in cwd = error.
rule ccfinder:
    input:
        "clean/{seq}.fasta"
    output:
        directory("results/ccfinder/{seq}")
    benchmark:
        "results/benchmark/ccf_{seq}.txt"
    log:
        out="logs/ccfinder_{seq}.log",
        err="logs/ccfinder_{seq}.error.log",
    threads: 1
    shadow:
        "full"
    conda:
        "envs/ccfinder.yaml"
    shell:'''
        perl bin/ccfinder/CRISPRCasFinder.pl \
            -so bin/ccfinder/sel392v2.so \
            -in {input} \
            -out ccfinder \
            -cas \
            -cpuM {threads} >> {log.out} 2>> {log.err}
        mkdir -p {output}
        cp -a ccfinder/. {output}
        rm -r ccfinder
        touch {log}
        '''

# run cidentify, output results to directory in results/cidentify named after .fasta input
rule cidentify:
    input:
        "clean/{seq}.fasta"
    output:
        "results/cidentify/{seq}/Complete_Cas_summary.csv",
        "results/cidentify/{seq}/Complete_Cassette_summary.csv",
        "results/cidentify/{seq}/Complete_array_dataset.fasta",
        "results/cidentify/{seq}/Complete_repeat_dataset.fasta",
        "results/cidentify/{seq}/Complete_spacer_dataset.fasta",
        "results/cidentify/{seq}/Complete_summary.csv",
        dir = directory("results/cidentify/{seq}"),
    benchmark:
        "results/benchmark/ci_{seq}.txt"
    log:
        out="logs/cidentify_{seq}.log",
        err="logs/cidentify_{seq}.error.log",
    threads: 1
    conda:
        "envs/cidentify.yaml"
    shell:'''
        mkdir -p results/cidentify
        python bin/cidentify/CRISPRidentify.py \
        --file {input} \
        --result_folder {output.dir} \
        --cas "True" > {log.out} 2>> {log.err}
        touch {output}
        '''

# run cdetect, output results to 3 files in a directory named after input fasta in 
# results/cdetect. For use in detecting CRISPR-Cas genes with PADLOC
rule cdetect:
    input:
         "clean/{seq}.fasta"
    output:
        "results/cdetect/{seq}/{seq}.1_crispr.gff",
        "results/cdetect/{seq}/{seq}.1_crispr.fp",
        dir = directory("results/cdetect/{seq}"),
        file = "results/cdetect/{seq}/{seq}.1_crispr",
    benchmark:
        "results/benchmark/cd_{seq}.txt"
    log:
        out="logs/cdetect_{seq}.log",
        err="logs/cdetect_{seq}.error.log",
    threads: 1
    conda:
        "padloc"
    shell:'''
        run-crisprdetect --input {input} --output {output.file} >> {log.out} 2>> {log.err}
        '''

# run padloc with output from crisprdetect, output results to directory in results/padloc 
# named after input fasta.
rule padloc:
    input:
        seq = "clean/{seq}.fasta",
        file = "results/cdetect/{seq}/{seq}.1_crispr.gff",
    output:
        directory("results/padloc/{seq}")
    benchmark:
        "results/benchmark/padloc_{seq}.txt"
    log:
        out="logs/padloc_{seq}.log",
        err="logs/padloc_{seq}.error.log",
    threads: 1
    conda:
        "padloc"
    shell:'''
        mkdir -p {output}
        padloc --fna {input.seq} \
        --crispr {input.file} \
        --outdir {output} \
        --cpu {threads} >> {log.out} 2>> {log.err}
        '''

#collate results per result step#
rule collatecct:
    input:
        expand("results/cctyper/{seq}", seq=SEQS)
    output:
        "results/cctyper.tsv"
    threads: 1
    shell: "./workflow/scripts/collatecct.sh results/cctyper/ {output}"

rule collateccf:
    input:
        expand("results/ccfinder/{seq}", seq=SEQS)
    output:
        "results/ccfcas.tsv",
        "results/ccfcrispr.tsv",
    threads: 1
    shell: "./workflow/scripts/collateccf.sh {input} {output}"

rule collatecidentify:
    input:
        expand("results/cidentify/{seq}", seq=SEQS),
    output:
        "results/cidentify.tsv",
        "results/cidentify_cas.tsv",
    threads: 1
    shell: "./workflow/scripts/collateci.sh {input} results/cidentify {output}"

rule collatepadloc:
    input:
        expand("results/padloc/{seq}", seq=SEQS)
    output:
        "results/padloc.tsv"
    threads: 1
    shell: "./workflow/scripts/collatepadloc.sh results/padloc/ {output}"

#gets the versions of each program run#
rule get_ccfinder_version:
    output:
        "results/ccfver.log"
    conda:
        "envs/ccfinder.yaml"
    shell:'''
        echo -e "\n -- CRISPRCasFinder environment --\n" > {output}
        conda list >> {output}
        '''

rule get_cctyper_version:
    output:
        "results/cctver.log"
    conda:
        "envs/cctyper.yaml"
    shell:'''
        echo -e "\n -- CRISPRCasTyper environment --\n" > {output}
        conda list >> {output}
        '''

rule get_cidentify_version:
    output:
        "results/civer.log"
    conda:
        "envs/cidentify.yaml"
    shell:'''
        echo -e "\n -- CRISPRIdentify environment --\n" > {output}
        conda list >> {output}
        '''

rule get_versions:
    input:
        ccf = "results/ccfver.log",
        cct = "results/cctver.log",
        ci = "results/civer.log",
    output:
        ver = "results/version.log",
        temp = "results/version.tmp",
    shell:'''
        echo -e "PRANCc version 0.3.1-beta\n" > {output.temp}
        conda --version >> {output.temp}
        echo -e "\n -- PADLOC environment --\n" >> {output.temp}
        conda list -n padloc >> {output.temp}
        echo -e "\n -- CRISPRDetect environment --\n" >> {output.temp}
        conda list -n crisprdetect >> {output.temp}
        echo -e "\n -- snakemake environment --\n" >> {output.temp}
        conda list -n snakemake >> {output.temp}
        cat {output.temp} {input} >> {output.ver}
    '''

# concatenate the benchmark and log files
rule cat_benchmarks:
    input:
        cct = expand("results/benchmark/cct_{seq}.txt", seq=SEQS),
        ccf = expand("results/benchmark/ccf_{seq}.txt", seq=SEQS),
        ci = expand("results/benchmark/ci_{seq}.txt", seq=SEQS),
        cd = expand("results/benchmark/cd_{seq}.txt", seq=SEQS),
        padloc = expand("results/benchmark/padloc_{seq}.txt", seq=SEQS),
    output:
        cct = "results/benchmark/cct.txt",
        ccf = "results/benchmark/ccf.txt",
        ci = "results/benchmark/ci.txt",
        cd = "results/benchmark/cd.txt",
        padloc = "results/benchmark/padloc.txt",
    shell:'''
        counter=0
        if [ $counter -eq 0 ]
        then
            echo -e 's\th:m:s\tmax_rss\tmax_vms\tmax_uss\tmax_pss\tio_in\tio_out\tmean_load\tcpu_time' |
            tee {output} > /dev/null
            counter=1
        fi

        sed -se 1d {input.cct} >> {output.cct}
        sed -se 1d {input.ccf} >> {output.ccf}
        sed -se 1d {input.ci} >> {output.ci}
        sed -se 1d {input.cd} >> {output.cd}
        sed -se 1d {input.padloc} >> {output.padloc}
        '''

rule cat_logs:
    input:
        cct = expand("logs/cctyper_{seq}.log", seq=SEQS),
        ccterror = expand("logs/cctyper_{seq}.error.log", seq=SEQS),
        ccf = expand("logs/ccfinder_{seq}.log", seq=SEQS),
        ccferror = expand("logs/ccfinder_{seq}.error.log", seq=SEQS),
        ci = expand("logs/cidentify_{seq}.log", seq=SEQS),
        cierror = expand("logs/cidentify_{seq}.error.log", seq=SEQS),
        cd = expand("logs/cdetect_{seq}.log", seq=SEQS),
        cderror = expand("logs/cdetect_{seq}.error.log", seq=SEQS),
        padloc = expand("logs/padloc_{seq}.log", seq=SEQS),
        padlocerror = expand("logs/padloc_{seq}.error.log", seq=SEQS),

    output:
        cct = "logs/cct.log",
        ccterror = "logs/cct.error.log",
        ccf = "logs/ccf.log",
        ccferror = "logs/ccf.error.log",
        ci = "logs/ci.log",
        cierror = "logs/ci.error.log",
        cd = "logs/cd.log",
        cderror = "logs/cd.error.log",
        padloc = "logs/padloc.log",
        padlocerror = "logs/padloc.error.log",
    shell:'''
        cat {input.cct} >> {output.cct}
        cat {input.ccterror} >> {output.ccterror}

        cat {input.ccf} >> {output.ccf}
        cat {input.ccferror} >> {output.ccferror}

        cat {input.ci} >> {output.ci}
        cat {input.cierror} >> {output.cierror}

        cat {input.cd} >> {output.cd}
        cat {input.cderror} >> {output.cderror}

        cat {input.padloc} >> {output.padloc}
        cat {input.padlocerror} >> {output.padlocerror}
        '''

#compile into tarball#
rule create_tarball:
    input:
        expand("results/cctyper/{seq}", seq=SEQS),
        expand("results/ccfinder/{seq}", seq=SEQS),
        expand("results/cidentify/{seq}", seq=SEQS),
        expand("results/cidentify/{seq}/Complete_Cas_summary.csv", seq=SEQS),
        expand("results/cidentify/{seq}/Complete_Cassette_summary.csv", seq=SEQS),
        expand("results/cidentify/{seq}/Complete_array_dataset.fasta", seq=SEQS),
        expand("results/cidentify/{seq}/Complete_repeat_dataset.fasta", seq=SEQS),
        expand("results/cidentify/{seq}/Complete_spacer_dataset.fasta", seq=SEQS),
        expand("results/cidentify/{seq}/Complete_summary.csv", seq=SEQS),
        expand("results/cdetect/{seq}/{seq}.1_crispr", seq=SEQS),
        expand("results/cdetect/{seq}/{seq}.1_crispr.gff", seq=SEQS),
        expand("results/cdetect/{seq}/{seq}.1_crispr.fp", seq=SEQS),
        expand("results/padloc/{seq}", seq=SEQS),
        "results/ccfcas.tsv",
        "results/ccfcrispr.tsv",
        "results/cctyper.tsv",
        "results/cidentify.tsv",
        "results/cidentify_cas.tsv",
        "results/padloc.tsv",
        "results/version.log",
        "results/benchmark/ccf.txt",
        "results/benchmark/cct.txt",
        "results/benchmark/ci.txt",
        "results/benchmark/cd.txt",
        "results/benchmark/padloc.txt",
        "logs/prancc.log",
        "logs/prancc.error.log",
        "logs/cct.log",
        "logs/cct.error.log",
        "logs/ccf.log",
        "logs/ccf.error.log",
        "logs/ci.log",
        "logs/ci.error.log",
        "logs/cd.log",
        "logs/cd.error.log",
        "logs/padloc.log",
        "logs/padloc.error.log",
    output:
        "results.tar.gz"
    shell:'''
        tar -czf {output} {input}
        '''
