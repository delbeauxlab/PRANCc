SEQS = glob_wildcards("upload/{seq}.fna").seq

rule all:
    input: 
        "results.tar.gz"

rule list_inputs:
    output:
        "../results/input_list.txt"
    shell:'''
        rm -r ../results
        mkdir ../results
        {input} > {output}
        '''

rule check_folders:
    output:
        "directory(results)",
        "directory(results/cctyper)",
        "directory(results/ccfinder)",
        "directory(results/cidentify)",
        "directory(results/cdetect)",
        "directory(results/padloc)",
    shell:'''
        rm -r {output}
        mkdir {output}
        '''

rule cctyper:
    input: 
        expand("upload/{seq}.fna", seq=SEQS),
        "directory(results/cctyper)",
    output:
        expand("directory(results/cctyper/{seq}/)", seq=SEQS)
    threads: 8
    conda:
        "envs/cctyper.yaml"
    shell:'''
        mkdir {output}
        cctyper --threads {threads} {input[0]} {output}
        '''
    
rule ccfinder:
    input: 
        expand("upload/{seq}.fna", seq=SEQS),
        "directory(results/ccfinder)",
    output:
        expand("directory(results/ccfinder/{seq}/)", seq=SEQS)
    threads: 1
    conda:
        "crisprcasfinder"
    shell:'''
        mkdir {output}
        perl bin/ccfinder/CRISPRCasFinder.pl --in {input[0]} --out {output}
        '''

rule cidentify:
    input:
        expand("upload/{seq}.fna", seq=SEQS),
        "directory(results/cidentify)",
    output:
        expand("directory(results/cidentify/{seq}/)", seq=SEQS)
    threads: 1
    conda:
        "crispr_identify_env"
    shell:'''
        mkdir {output}
        python bin/cidentify/CRISPRidentify.py --file {input} --result_folder {output}
        '''

rule cdetect:
    input:
        expand("upload/{seq}.fna", seq=SEQS),
        "directory(results/cidentify)",
    output:
        expand("results/cdetect/{seq}.1_crispr", seq=SEQS),
        expand("results/cdetect/{seq}.1_crispr.gff", seq=SEQS),
        expand("results/cdetect/{seq}.1_crispr.fp", seq=SEQS),
    threads: 1
    conda:
        "padloc"
    shell:'''
        run-crisprdetect --input {input[0]} --output {output[0]}
        '''

rule padloc:
    input:
        expand("upload/{seq}.fna", seq=SEQS),
        "directory(results/padloc)",
        expand("results/cdetect/{seq}.1_crispr.gff", seq=SEQS),
    output:
        expand("directory(results/padloc/{seq}/)", seq=SEQS)
    threads: 8
    conda:
        "padloc"
    shell:'''
        padloc --fna {input[0]} --crispr {input[1]} --outdir {output} --cpu {threads}
        '''

rule collate_cct:
    input:
        expand("directory(results/cctyper/{seq}/)", seq=SEQS)
    output:
        "results/cctyper.tsv"
    shell:"./comparison/scripts/cctypercollate.sh {input} {output}"

rule collateccf:
    input:
        expand("directory(results/ccfinder/{seq}/)", seq=SEQS)
    output:
        "results/ccfinder.tsv"
    threads: 1
    shell: "./comparison/scripts/collateccf.sh {input} {output}"

rule collateci:
    input:
        expand("directory(results/cidentify/{seq}/)", seq=SEQS)
    output:
        "results/cidentify.tsv"
    threads: 1
    shell: "./comparison/scripts/collateci.sh {input} {output}"

rule collatepadloc:
    input:
        expand("directory(results/padloc/{seq}/)", seq=SEQS)
    output:
        "results/padloc.tsv"
    shell: "./comparison/scripts/collatepadloc.sh {input} {output}"

rule create_tarball:
    input:
        "results/cctyper.tsv",
        "results/ccfinder.tsv",
        "results/cidentify.tsv",
        "results/padloc.tsv",
        expand("directory(results/cctyper/{seq}/)", seq=SEQS),
        expand("directory(results/ccfinder/{seq}/)", seq=SEQS),
        expand("directory(results/cidentify/{seq}/)", seq=SEQS),
        expand("results/cdetect/{seq}.1_crispr", seq=SEQS),
        expand("results/cdetect/{seq}.1_crispr.gff", seq=SEQS),
        expand("results/cdetect/{seq}.1_crispr.fp", seq=SEQS),
        expand("directory(results/padloc/{seq}/)", seq=SEQS),
    output:
        "results.tar.gz"
    shell:"tar -xzvf {output} {input}"
    